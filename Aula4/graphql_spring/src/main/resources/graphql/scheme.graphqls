# ::::::::::::::: Tipos da API :::::::::::::::::::::

enum Episode{
    NEWHOPE
    EMPIRE
    JEDI
}

interface Character{
    id: ID! # tipo que representa um ID não nulo
    name: String! # aceita string não null
    appearsIn: [Episode]! # aceita uma lista de Episodes não nulos
    friends: [Character] # aceita lista de Characters. Podem ser nulos
}

type Droid implements Character{
    id: ID!
    name: String!
    appearsIn: [Episode]!
    friends: [Character]
    primaryFunction: String
}

type Human implements Character {
  id: ID!
  name: String!
  appearsIn: [Episode]!
  friends: [Character]
  height: Float
}

type Starship {
  id: ID!
  name: String!
  length: Float
}

type Review {
  stars: Int!
  commentary: String
}

# ::::::::::::::: Tipo para Inputs :::::::::::::::::::::

input ReviewInput{
    stars: Int!
    commentary: String
}

# ::::::::::::::: Querys :::::::::::::::::::::

type Query {
  hero(episode: Episode): Character #Será o mesmo nome no método Java
  droid(id: ID!): Droid # Será o mesmo nome no método Java
  search(text: String!): [SearchResult!]! # Será o mesmo nome no método Java
}

# ::::::::::::::: Mutations :::::::::::::::::::::

type Mutation {
    createReview(episode: Episode!, review: ReviewInput!): Review # Será o mesmo nome no método Java
}

# ::::::::::::::: Union (Consulta combinada) :::::::::::::::::::::

union SearchResult = Human | Droid | Starship
type Query {
    hero(episode: Episode): Character
    droid(id: ID!): Droid
    search(text: String!): [SearchResult!]!
    
    # Novas Queries
    [cite_start]humans: [Human!]! [cite: 36]
    [cite_start]starships: [Starship!]! [cite: 37]
    [cite_start]character(id: ID!): Character [cite: 38]
}

type Mutation {
    createReview(episode: Episode!, review: ReviewInput!): Review
    
    # Novas Mutations
    [cite_start]createHuman(id: ID!, name: String!, height: Float): Human [cite: 42]
    [cite_start]createDroid(id: ID!, name: String!, primaryFunction: String): Droid [cite: 43]
    [cite_start]createStarship(id: ID!, name: String!, length: Float): Starship [cite: 44, 45]
    [cite_start]addFriend(characterId: ID!, friendId: ID!): Character [cite: 51]
}

# Tipos de entrada para as novas mutations
input HumanInput {
    id: ID!
    name: String!
    height: Float
}

input DroidInput {
    id: ID!
    name: String!
    primaryFunction: String
}

input StarshipInput {
    id: ID!
    name: String!
    length: Float
}

# O resto do seu schema.graphqls original deve permanecer aqui (ex: os tipos de Character, Human, Droid, Starship, Episode e Review).